import asyncio
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from selenium.webdriver.support.wait import WebDriverWait

from bot.states import VoteIns

from selenium import webdriver

from bot.utils.selen_utils import close_modal, login_btn_press, phone_number_press
from bot.vars import URL

router = Router(name="Vote Router")

# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è selenium-—Å–µ—Å—Å–∏–π –ø–æ user_id
selenium_sessions: dict[int, webdriver.Chrome] = {}

# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======
def start_selenium_session(user_id: int, phone: str) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Selenium, –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é"""
    options_chrome = webdriver.ChromeOptions()
    options_chrome.add_argument("--no-sandbox")
    options_chrome.add_argument("--headless")
    options_chrome.add_argument("--disable-dev-shm-usage")

    browser = webdriver.Chrome(options=options_chrome)
    browser.get(URL)

    WebDriverWait(browser, 10)

    # –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å), –Ω–∞–∂–∞—Ç—å "–í–æ–π—Ç–∏", –≤–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    try:
        close_modal(browser)
    except Exception:
        pass  # –º–æ–¥–∞–ª–∫–∏ –º–æ–≥–ª–æ –Ω–µ –±—ã—Ç—å

    if not login_btn_press(browser):
        # –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å/–∫–∏–Ω—É—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –Ω–∞ —Ç–≤–æ—ë —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ
        ...

    phone_number_press(browser, phone)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–¥ user_id
    selenium_sessions[user_id] = browser


def get_selenium_session(user_id: int) -> webdriver.Chrome | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç selenium-–¥—Ä–∞–π–≤–µ—Ä –¥–ª—è —é–∑–µ—Ä–∞"""
    return selenium_sessions.get(user_id)


def submit_sms_code(user_id: int, code: str) -> bool:
    """–í–≤–æ–¥–∏—Ç SMS-–∫–æ–¥ —á–µ—Ä–µ–∑ Selenium –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —à–∞–≥"""
    driver = get_selenium_session(user_id)
    if not driver:
        return False

    # –ü—Ä–∏–º–µ—Ä: –¥–æ—Ä–∞–±–æ—Ç–∞–π –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã/–∫–Ω–æ–ø–∫–∏
    # code_input = driver.find_element(By.ID, "sms_code")
    # code_input.send_keys(code)
    # driver.find_element(By.ID, "submit").click()

    # –ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä, –µ—Å–ª–∏ –¥–∞–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
    try:
        driver.close()
    except Exception:
        pass
    finally:
        selenium_sessions.pop(user_id, None)

    return True


# ====== –•–ï–ù–î–õ–ï–†–´ ======

# 1) –ó–∞–ø—É—Å–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ /vote
@router.message(Command("vote"))
async def cmd_vote(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +99998887766):")
    await state.set_state(VoteIns.send_phone)

# 2) –ó–∞–ø—É—Å–∫ –ø–æ –∫–Ω–æ–ø–∫–µ ReplyKeyboard "–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å"
#    (!) –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º —Ç–≤–æ–µ–π –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ —É —Ç–µ–±—è —Å —ç–º–æ–¥–∑–∏ ‚Äî –æ—Å—Ç–∞–≤—å –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.
@router.message(F.text.in_({"–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å", "üó≥ –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å"}))
async def vote_button(message: Message, state: FSMContext):
    # —Ç–æ—Ç –∂–µ –ø–æ—Ç–æ–∫, —á—Ç–æ –∏ /vote
    await cmd_vote(message, state)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(VoteIns.send_phone, F.text.regexp(r"^\+9\d{10}$"))
async def phone_received(message: Message, state: FSMContext):
    phone = message.text
    await state.update_data(phone=phone)

    # —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—à—ë–ª
    await message.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä –∏ –≤–≤–æ–∂—É –≤–∞—à –Ω–æ–º–µ—Ä...")

    # –ó–∞–ø—É—Å—Ç–∏–º Selenium –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    await asyncio.to_thread(start_selenium_session, message.from_user.id, phone)

    await message.answer("‚úÖ –ù–æ–º–µ—Ä –≤–≤–µ–¥—ë–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:")
    await state.set_state(VoteIns.send_submit_code)



# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
@router.message(VoteIns.send_phone)
async def phone_invalid(message: Message):
    await message.answer(
        "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +99998887766:"
    )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
@router.message(VoteIns.send_submit_code, F.text.regexp(r"^\d{4,6}$"))
async def code_received(message: Message, state: FSMContext):
    user_data = await state.get_data()
    phone = user_data.get("phone")

    await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–¥...")

    success = await asyncio.to_thread(submit_sms_code, message.from_user.id, message.text)

    if success:
        await message.answer(
            f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω {phone} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.\n"
            f"–ö–æ–¥ {message.text} –ø—Ä–∏–Ω—è—Ç."
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /vote –∑–∞–Ω–æ–≤–æ.")

    await state.clear()



# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
@router.message(VoteIns.send_submit_code)
async def code_invalid(message: Message):
    await message.answer("–ö–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ (4‚Äì6 —Ü–∏—Ñ—Ä):")
